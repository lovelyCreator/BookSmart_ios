{"version":3,"sources":["useApi.js"],"names":["_axios","_interopRequireDefault","require","_asyncStorage","_native","Signup","userData","endpoint","response","regeneratorRuntime","async","_context","prev","next","console","log","awrap","axios","post","concat","sent","abrupt","data","t0","stop","Signin","credentials","_context2","token","AsyncStorage","setItem","Update","updateData","existingToken","_context3","getItem","headers","Authorization","status","PostJob","jobData","_context4","Jobs","role","_context5","get","Role","isTokenInLocalStorage","_context6","error"],"mappings":"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","file":"useApi.min.js","sourcesContent":["import axios from './axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport  { useNavigation, useRoute } from '@react-navigation/native';\r\n\r\nexport const Signup = async (userData, endpoint) => {\r\n  try {\r\n    console.log('success')\r\n    const response = await axios.post(`api/${endpoint}/signup`, userData);\r\n    // const response = await axios.get(\"/test\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(\"================\");\r\n    console.log(error)\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const Signin = async (credentials, endpoint) => {\r\n  try {\r\n    console.log(\"login\");\r\n    const response = await axios.post(`api/${endpoint}/login`, credentials);\r\n    // console.log(response);\r\n    if (response.data.token) {\r\n      await AsyncStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const Update = async (updateData, endpoint) => {\r\n  try {\r\n    console.log(\"update\");\r\n    // Existing token (obtained from AsyncStorage or login)\r\n    const existingToken = await AsyncStorage.getItem('token');\r\n\r\n    // Include token in Authorization header\r\n    const response = await axios.post(`api/${endpoint}/update`, updateData, {\r\n      headers: {\r\n        Authorization: `Bearer ${existingToken}`\r\n      }\r\n    });\r\n\r\n    // If the update is successful, you can potentially update the token in AsyncStorage\r\n    if (response.status === 200) {\r\n      // Optionally, if the backend sends a new token for some reason\r\n      if (response.data.token) {\r\n        await AsyncStorage.setItem('token', response.data.token);\r\n      }\r\n    } \r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const PostJob = async (jobData, endpoint) => {\r\n  try {\r\n    console.log('success')\r\n    // Existing token (obtained from AsyncStorage or login)\r\n    const existingToken = await AsyncStorage.getItem('token');\r\n    const response = await axios.post(`api/${endpoint}/postJob`, jobData, {\r\n      headers: {\r\n        Authorization: `Bearer ${existingToken}`\r\n      }\r\n    });\r\n    // const response = await axios.get(\"/test\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(\"================\");\r\n    console.log(error)\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const Jobs = async (endpoint, role) => {\r\n  try {\r\n    // console.log(\"jobs\");\r\n    // Existing token (obtained from AsyncStorage or login)\r\n    const existingToken = await AsyncStorage.getItem('token');\r\n    console.log(existingToken)\r\n    // Include token in Authorization header\r\n    const response = await axios.get(`api/${endpoint}/shifts`, {\r\n      headers: {\r\n        Authorization: `Bearer ${existingToken}`,\r\n        Role: role\r\n      }\r\n    });\r\n    console.log(response.data.jobData)\r\n    // If the update is successful, you can potentially update the token in AsyncStorage\r\n    if (response.status === 200) {\r\n      // Optionally, if the backend sends a new token for some reason\r\n      if (response.data.token) {\r\n        await AsyncStorage.setItem('token', response.data.token);\r\n      }\r\n    } else if (response.status === 401) {\r\n      console.log('Token is expired')\r\n      // navigation.navigate('Home')\r\n    }\r\n    return response.data.jobData;\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const isTokenInLocalStorage = async () => {\r\n  try {\r\n    const token = await AsyncStorage.getItem('token');\r\n    return token !== null;\r\n\r\n  } catch (error) {\r\n    console.error('Error checking for token in localstorage:', error);\r\n    return false;\r\n  }\r\n}"]}