{"version":3,"sources":["useApi.js"],"names":["Signup","userData","endpoint","console","log","axios","post","response","data","Signin","credentials","token","AsyncStorage","setItem","Update","updateData","getItem","existingToken","headers","Authorization","status","PostJob","jobData","Jobs","role","get","Role","isTokenInLocalStorage","error"],"mappings":"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","sourcesContent":["import axios from './axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport  { useNavigation, useRoute } from '@react-navigation/native';\r\n\r\nexport const Signup = async (userData, endpoint) => {\r\n  try {\r\n    console.log('success')\r\n    const response = await axios.post(`api/${endpoint}/signup`, userData);\r\n    // const response = await axios.get(\"/test\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(\"================\");\r\n    console.log(error)\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const Signin = async (credentials, endpoint) => {\r\n  try {\r\n    console.log(\"login\");\r\n    const response = await axios.post(`api/${endpoint}/login`, credentials);\r\n    // console.log(response);\r\n    if (response.data.token) {\r\n      await AsyncStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const Update = async (updateData, endpoint) => {\r\n  try {\r\n    console.log(\"update\");\r\n    // Existing token (obtained from AsyncStorage or login)\r\n    const existingToken = await AsyncStorage.getItem('token');\r\n\r\n    // Include token in Authorization header\r\n    const response = await axios.post(`api/${endpoint}/update`, updateData, {\r\n      headers: {\r\n        Authorization: `Bearer ${existingToken}`\r\n      }\r\n    });\r\n\r\n    // If the update is successful, you can potentially update the token in AsyncStorage\r\n    if (response.status === 200) {\r\n      // Optionally, if the backend sends a new token for some reason\r\n      if (response.data.token) {\r\n        await AsyncStorage.setItem('token', response.data.token);\r\n      }\r\n    } \r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const PostJob = async (jobData, endpoint) => {\r\n  try {\r\n    console.log('success')\r\n    // Existing token (obtained from AsyncStorage or login)\r\n    const existingToken = await AsyncStorage.getItem('token');\r\n    const response = await axios.post(`api/${endpoint}/postJob`, jobData, {\r\n      headers: {\r\n        Authorization: `Bearer ${existingToken}`\r\n      }\r\n    });\r\n    // const response = await axios.get(\"/test\");\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(\"================\");\r\n    console.log(error)\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const Jobs = async (endpoint, role) => {\r\n  try {\r\n    // console.log(\"jobs\");\r\n    // Existing token (obtained from AsyncStorage or login)\r\n    const existingToken = await AsyncStorage.getItem('token');\r\n    console.log(existingToken)\r\n    // Include token in Authorization header\r\n    const response = await axios.get(`api/${endpoint}/shifts`, {\r\n      headers: {\r\n        Authorization: `Bearer ${existingToken}`,\r\n        Role: role\r\n      }\r\n    });\r\n    console.log(response.data.jobData)\r\n    // If the update is successful, you can potentially update the token in AsyncStorage\r\n    if (response.status === 200) {\r\n      // Optionally, if the backend sends a new token for some reason\r\n      if (response.data.token) {\r\n        await AsyncStorage.setItem('token', response.data.token);\r\n      }\r\n    } else if (response.status === 401) {\r\n      console.log('Token is expired')\r\n      // navigation.navigate('Home')\r\n    }\r\n    return response.data.jobData;\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const isTokenInLocalStorage = async () => {\r\n  try {\r\n    const token = await AsyncStorage.getItem('token');\r\n    return token !== null;\r\n\r\n  } catch (error) {\r\n    console.error('Error checking for token in localstorage:', error);\r\n    return false;\r\n  }\r\n}"],"file":"useApi.dev.js"}